% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fast_matrix_ops}
\alias{fast_matrix_ops}
\alias{fMatProd}
\alias{fMatTransProd}
\alias{fMatSolve}
\alias{fMatInv}
\alias{fMatPseudoInv}
\alias{fMatLeastSquare}
\alias{fMatDet}
\alias{fMatRank}
\alias{fMatRCond}
\title{Functions that use oneMKL for fast matrix calculations through RcppEigen}
\usage{
fMatProd(X, Y, is_X_symmetric = FALSE)

fMatTransProd(X, Y, is_X_symmetric = FALSE)

fMatSolve(X, Y, is_sym_pd = FALSE, is_invertible = FALSE)

fMatInv(X, is_sym_pd = FALSE)

fMatPseudoInv(X)

fMatLeastSquare(X, Y, stable = FALSE, is_X_full_rank = TRUE)

fMatDet(X)

fMatRank(X)

fMatRCond(X)
}
\arguments{
\item{X, Y}{The input matrices 'X' and 'Y'.}

\item{is_X_symmetric}{A logical variable indicating whether the input matrix `X` is symmetric.
Better computational performance is expected if the matrix is symmetric.}

\item{is_sym_pd}{A logical variable indicating whether the input matrix `X` is symmetric positive definitive.
Better computational performance is expected if the matrix is symmetric positive definitive for `fMatSolve` and `fMatInv`.}

\item{is_invertible}{A logical variable indicating whether the input matrix `X` is invertible.
Better computational performance is expected if the matrix is invertible for `fMatSolve`.}

\item{stable}{A logical variable indicating whether to use a more stable
but slower algorithm for `fMatLeastSquare`.}

\item{is_X_full_rank}{A logical variable indicating whether the input matrix 'X' is full-rank.
If false, the pseudo inverse will be applied for `fMatLeastSquare`.}
}
\value{
The corresponding results.
}
\description{
\describe{
\item{\strong{fMatProd}}{This function returns the multiplication of matrices `X` and `Y`, i.e., `XY`.}
\item{\strong{fMatTransProd}}{This function returns the product of the transpose of the matrix `X`
 and the matrix `Y`, i.e., `X^T Y`.}
\item{\strong{fMatSolve}}{This function returns the solution of a linear system `AX=Y`.
 If the matrix `X` is symmetric positive definite, Cholesky decomposition
 will be used for better computational performance.
 If the matrix `X` is invertible, the LU decomposition
 will be used for better computational performance.}
\item{\strong{fMatInv}}{This function returns the inverse of the matrix `X`, i.e., `X^(-1)`.
 If the matrix `X` is symmetric positive definite, Cholesky decomposition
 will be used for better computational performance.}
\item{\strong{fMatPseudoInv}}{This function returns the pseudo-inverse (also called generalized inverse or g-inverse) of the matrix 'X'.}
\item{\strong{fMatLeastSquare}}{This function returns the solution of least square through QR decomposition.
If `stable` = TRUE, a more stable but slower algorithm will be applied.}
\item{\strong{fMatDet}}{This function returns the determinant of the matrix `X`.}
\item{\strong{fMatRank}}{This function returns the rank of the matrix `X`.}
\item{\strong{fMatRCond}}{This function returns the reciprocal condition number of the matrix `X`.}
}
}
\examples{
x <- matrix(rnorm(1e4), 100)
y <- matrix(rnorm(1e2), 100)
z <- matrix(rnorm(1e4), 100)
XtX <- fMatProd(t(x), x)
XtX2 <- fMatTransProd(x, x)
all.equal(XtX, XtX2) # TRUE

invXtX <- fMatInv(XtX)
fMatSolve(XtX, fMatTransProd(x, y)) # linear regression coefficients

fMatDet(x)
fMatRank(x)
fMatRCond(x)
}
