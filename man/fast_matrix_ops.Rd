% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fast_matrix_ops}
\alias{fast_matrix_ops}
\alias{fMatProd}
\alias{fMatTransProd}
\alias{fMatSolve}
\alias{fMatInv}
\alias{fMatPseudoInv}
\alias{fMatAdd}
\alias{fMatSubtract}
\alias{fMatSumDiffSquared}
\alias{fMatDet}
\title{Functions that use oneMKL for fast matrix calculations}
\usage{
fMatProd(x, y)

fMatTransProd(x, y)

fMatSolve(x, y, fast = FALSE, is_sym_pd = FALSE)

fMatInv(x, is_sym_pd = FALSE)

fMatPseudoInv(x)

fMatAdd(x, y)

fMatSubtract(x, y)

fMatSumDiffSquared(x, y)

fMatDet(x)
}
\arguments{
\item{x, y}{matrices}

\item{fast}{specify whether to enable faster computation of the linear model solution
by disabling the use of rcond, iterative refinement, and equilibration.}

\item{is_sym_pd}{specific whether the input matrix is symmetric/Hermitian positive definite.
Enabling this option can result in faster computation if the matrix satisfies these properties.}
}
\value{
The result matrices
}
\description{
Functions that use oneMKL for fast matrix calculations
}
\examples{
x <- matrix(rnorm(1e4), 100)
y <- matrix(rnorm(1e2), 100)
z <- matrix(rnorm(1e4), 100)
XtX <- fMatProd(t(x), x)
XtX2 <- fMatTransProd(x, x)
all.equal(XtX, XtX2) # TRUE
invXtX <- fMatInv(XtX)
fMatAdd(x, z) # x + z
fMatSubtract(x, z) # x - z
fMatSumDiffSquared(x, z) # sum((x-z)^2)

A <- matrix(c(7,6,4,8,10,11,12,9,3,5,1,2), 3, 4)
A \%*\% fMatPseudoInv(A) # => very close to identity matrix
}
