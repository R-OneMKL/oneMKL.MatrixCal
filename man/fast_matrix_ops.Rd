% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fast_matrix_ops}
\alias{fast_matrix_ops}
\alias{fMatProd}
\alias{fMatTransProd}
\alias{fMatSolve}
\alias{fMatInv}
\alias{fMatAdd}
\alias{fMatSubtract}
\alias{fMatRowSum}
\alias{fMatColSum}
\alias{fMatRowMin}
\alias{fMatColMin}
\alias{fMatRowMax}
\alias{fMatColMax}
\alias{fMatDet}
\alias{fMatRank}
\alias{fMatRCond}
\title{Functions that use oneMKL for fast matrix calculations through RcppEigen}
\usage{
fMatProd(X, Y)

fMatTransProd(X, Y)

fMatSolve(X, Y, is_sym_pd = FALSE, is_invertible = FALSE)

fMatInv(X, is_sym_pd = FALSE)

fMatAdd(X, Y)

fMatSubtract(X, Y)

fMatRowSum(X)

fMatColSum(X)

fMatRowMin(X)

fMatColMin(X)

fMatRowMax(X)

fMatColMax(X)

fMatDet(X)

fMatRank(X)

fMatRCond(X)
}
\arguments{
\item{X, Y}{The input matrices 'X' and 'Y'.}

\item{is_sym_pd}{A logical variable indicating whether the input matrix `X` is symmetric positive definitive.
Better computational performance is expected if the matrix is symmetric positive definitive.}

\item{is_invertible}{A logical variable indicating whether the input matrix `X` is invertible.
Better computational performance is expected if the matrix is invertible.}
}
\value{
The corresponding results.
}
\description{
\describe{
\item{\strong{fMatProd}}{This function returns the multiplication of matrices `X` and `Y`, i.e., `XY`.}
\item{\strong{fMatTransProd}}{This function returns the product of the transpose of the matrix `X`
 and the matrix `Y`, i.e., `X^T Y`.}
\item{\strong{fMatInv}}{This function returns the inverse of the matrix `X`, i.e., `X^(-1)`.
 If the matrix `X` is symmetric positive definite, Cholesky decomposition
 will be used for better computational performance.}
\item{\strong{fMatSolve}}{This function returns the solution of a linear system `AX=b`.
 If the matrix `X` is symmetric positive definite, Cholesky decomposition
 will be used for better computational performance.
 If the matrix `X` is invertible, the LU decomposition
 will be used for better computational performance.}
\item{\strong{fMatAdd}}{This function returns the sum of matrices `X` and `Y`, i.e., `X + Y`}
\item{\strong{fMatSubtract}}{This function returns the result of the matrix `X` minus the matrix `Y`, namely, `X - Y`.}
\item{\strong{fMatDet}}{This function returns the determinant of the matrix `X`.}
\item{\strong{fMatRank}}{This function returns the rank of the matrix `X`.}
\item{\strong{fMatRowSum}}{This function returns the sum of each row.}
\item{\strong{fMatColSum}}{This function returns the sum of each column.}
\item{\strong{fMatRowMin}}{This function returns the minimum of each row.}
\item{\strong{fMatRowMax}}{This function returns the maximum of each row.}
\item{\strong{fMatColMin}}{This function returns the minimum of each column.}
\item{\strong{fMatColMax}}{This function returns the maximum of each column.}
}
}
\examples{
x <- matrix(rnorm(1e4), 100)
y <- matrix(rnorm(1e2), 100)
z <- matrix(rnorm(1e4), 100)
XtX <- fMatProd(t(x), x)
XtX2 <- fMatTransProd(x, x)
all.equal(XtX, XtX2) # TRUE

invXtX <- fMatInv(XtX)
fMatSolve(XtX, fMatTransProd(x, y)) # linear regression coefficients

fMatAdd(x, z) # x + z
fMatSubtract(x, z) # x - z

fMatDet(x)
fMatRank(x)

fMatColSum(x) # colSums(x)
fMatRowSum(x) # rowSums(x)
fMatRowMin(x) # apply(x, 1, min)
fMatRowMax(x) # apply(x, 1, max)
fMatColMin(x) # apply(x, 2, min)
fMatColMax(x) # apply(x, 2, max)
}
