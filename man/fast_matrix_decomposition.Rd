% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{fast_matrix_decomposition}
\alias{fast_matrix_decomposition}
\alias{fMatChol}
\title{Functions to do the decomposition by leveraging Intel MKL}
\usage{
fMatChol(X)
}
\arguments{
\item{X}{A matrix to perform decomposition.}
}
\description{
Functions to do the decomposition by leveraging Intel MKL
}
\examples{
m <- matrix(c(5,1,1,3),2,2)
fMatChol(m)
all.equal(fMatChol(m), chol(m)) # It's the same to R
fMatChol(m, FALSE) # lower CHOL matrix

hilbert <- function(n) { i <- 1:n; 1 / outer(i - 1, i, "+") }
X <- hilbert(9)[, 1:6]
(s <- fMatSvd(X))
D <- diag(as.vector(s$d))
s$u[ , 1:6] \%*\% D \%*\% t(s$v) #  X = U D V'
t(s$u[ , 1:6]) \%*\% X \%*\% s$v #  D = U' X V

fMatEigen(cbind(c(1,-1), c(-1,1)), TRUE)
fMatEigen(cbind(c(1,-1), c(-1,1)), FALSE) # Same, but different datatype

X <- matrix(rnorm(9), 3, 3)
res <- fMatLu(X, TRUE)
# Note that L is generally not lower-triangular when permutation_matrix = FALSE
res$P \%*\% res$L \%*\% res$U # X = P' L U

schurRes <- fMatSchur(X)
# Note that Schur decomposition is not unique in general.
schurRes$U \%*\% schurRes$S \%*\% t(schurRes$U) # X = U S U'

qrRes <- fMatQr(X)
qrRes$Q \%*\% qrRes$R # X = Q R
}
