// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <oneMKL.h>
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// fMatChol
arma::mat fMatChol(const arma::mat& x, bool upper);
RcppExport SEXP _oneMKLUtil_fMatChol(SEXP xSEXP, SEXP upperSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type upper(upperSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatChol(x, upper));
    return rcpp_result_gen;
END_RCPP
}
// fMatSvd
Rcpp::List fMatSvd(const arma::mat& x, bool economical);
RcppExport SEXP _oneMKLUtil_fMatSvd(SEXP xSEXP, SEXP economicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type economical(economicalSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatSvd(x, economical));
    return rcpp_result_gen;
END_RCPP
}
// fMatEigen
Rcpp::List fMatEigen(const arma::mat& x, bool is_symmetric);
RcppExport SEXP _oneMKLUtil_fMatEigen(SEXP xSEXP, SEXP is_symmetricSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type is_symmetric(is_symmetricSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatEigen(x, is_symmetric));
    return rcpp_result_gen;
END_RCPP
}
// fMatLu
Rcpp::List fMatLu(const arma::mat& x, bool permutation_matrix);
RcppExport SEXP _oneMKLUtil_fMatLu(SEXP xSEXP, SEXP permutation_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type permutation_matrix(permutation_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatLu(x, permutation_matrix));
    return rcpp_result_gen;
END_RCPP
}
// fMatSchur
Rcpp::List fMatSchur(const arma::mat& x);
RcppExport SEXP _oneMKLUtil_fMatSchur(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatSchur(x));
    return rcpp_result_gen;
END_RCPP
}
// fMatQr
Rcpp::List fMatQr(const arma::mat& x, bool permutation_matrix, bool economical);
RcppExport SEXP _oneMKLUtil_fMatQr(SEXP xSEXP, SEXP permutation_matrixSEXP, SEXP economicalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type permutation_matrix(permutation_matrixSEXP);
    Rcpp::traits::input_parameter< bool >::type economical(economicalSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatQr(x, permutation_matrix, economical));
    return rcpp_result_gen;
END_RCPP
}
// fMatProd
arma::mat fMatProd(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _oneMKLUtil_fMatProd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatProd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatTransProd
arma::mat fMatTransProd(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _oneMKLUtil_fMatTransProd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatTransProd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatInv
arma::mat fMatInv(const arma::mat& x, bool is_sym_pd);
RcppExport SEXP _oneMKLUtil_fMatInv(SEXP xSEXP, SEXP is_sym_pdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type is_sym_pd(is_sym_pdSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatInv(x, is_sym_pd));
    return rcpp_result_gen;
END_RCPP
}
// fMatPseudoInv
arma::mat fMatPseudoInv(const arma::mat& x);
RcppExport SEXP _oneMKLUtil_fMatPseudoInv(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatPseudoInv(x));
    return rcpp_result_gen;
END_RCPP
}
// fMatAdd
arma::mat fMatAdd(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _oneMKLUtil_fMatAdd(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatAdd(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatSubtract
arma::mat fMatSubtract(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _oneMKLUtil_fMatSubtract(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatSubtract(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatSumDiffSquared
double fMatSumDiffSquared(const arma::mat& x, const arma::mat& y);
RcppExport SEXP _oneMKLUtil_fMatSumDiffSquared(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(fMatSumDiffSquared(x, y));
    return rcpp_result_gen;
END_RCPP
}
// fMatDet
double fMatDet(const arma::mat& x);
RcppExport SEXP _oneMKLUtil_fMatDet(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(fMatDet(x));
    return rcpp_result_gen;
END_RCPP
}
// mkl_real_solve
arma::mat mkl_real_solve(const arma::mat& a, const arma::mat& b, double tol);
RcppExport SEXP _oneMKLUtil_mkl_real_solve(SEXP aSEXP, SEXP bSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type b(bSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_real_solve(a, b, tol));
    return rcpp_result_gen;
END_RCPP
}
// mkl_cmpl_solve
arma::cx_mat mkl_cmpl_solve(const arma::cx_mat& a, const arma::cx_mat& b);
RcppExport SEXP _oneMKLUtil_mkl_cmpl_solve(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type a(aSEXP);
    Rcpp::traits::input_parameter< const arma::cx_mat& >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mkl_cmpl_solve(a, b));
    return rcpp_result_gen;
END_RCPP
}
// getMKLVersion
std::string getMKLVersion();
RcppExport SEXP _oneMKLUtil_getMKLVersion() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMKLVersion());
    return rcpp_result_gen;
END_RCPP
}
// setMKLThreads
int setMKLThreads(int nThreads);
RcppExport SEXP _oneMKLUtil_setMKLThreads(SEXP nThreadsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nThreads(nThreadsSEXP);
    rcpp_result_gen = Rcpp::wrap(setMKLThreads(nThreads));
    return rcpp_result_gen;
END_RCPP
}
// getMKLThreads
int getMKLThreads();
RcppExport SEXP _oneMKLUtil_getMKLThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getMKLThreads());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_oneMKLUtil_fMatChol", (DL_FUNC) &_oneMKLUtil_fMatChol, 2},
    {"_oneMKLUtil_fMatSvd", (DL_FUNC) &_oneMKLUtil_fMatSvd, 2},
    {"_oneMKLUtil_fMatEigen", (DL_FUNC) &_oneMKLUtil_fMatEigen, 2},
    {"_oneMKLUtil_fMatLu", (DL_FUNC) &_oneMKLUtil_fMatLu, 2},
    {"_oneMKLUtil_fMatSchur", (DL_FUNC) &_oneMKLUtil_fMatSchur, 1},
    {"_oneMKLUtil_fMatQr", (DL_FUNC) &_oneMKLUtil_fMatQr, 3},
    {"_oneMKLUtil_fMatProd", (DL_FUNC) &_oneMKLUtil_fMatProd, 2},
    {"_oneMKLUtil_fMatTransProd", (DL_FUNC) &_oneMKLUtil_fMatTransProd, 2},
    {"_oneMKLUtil_fMatInv", (DL_FUNC) &_oneMKLUtil_fMatInv, 2},
    {"_oneMKLUtil_fMatPseudoInv", (DL_FUNC) &_oneMKLUtil_fMatPseudoInv, 1},
    {"_oneMKLUtil_fMatAdd", (DL_FUNC) &_oneMKLUtil_fMatAdd, 2},
    {"_oneMKLUtil_fMatSubtract", (DL_FUNC) &_oneMKLUtil_fMatSubtract, 2},
    {"_oneMKLUtil_fMatSumDiffSquared", (DL_FUNC) &_oneMKLUtil_fMatSumDiffSquared, 2},
    {"_oneMKLUtil_fMatDet", (DL_FUNC) &_oneMKLUtil_fMatDet, 1},
    {"_oneMKLUtil_mkl_real_solve", (DL_FUNC) &_oneMKLUtil_mkl_real_solve, 3},
    {"_oneMKLUtil_mkl_cmpl_solve", (DL_FUNC) &_oneMKLUtil_mkl_cmpl_solve, 2},
    {"_oneMKLUtil_getMKLVersion", (DL_FUNC) &_oneMKLUtil_getMKLVersion, 0},
    {"_oneMKLUtil_setMKLThreads", (DL_FUNC) &_oneMKLUtil_setMKLThreads, 1},
    {"_oneMKLUtil_getMKLThreads", (DL_FUNC) &_oneMKLUtil_getMKLThreads, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_oneMKLUtil(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
